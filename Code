/*
/Problem 2
var acc = 0;
for (var i = 2; i < process.argv.length;i++){
  acc = acc + Number(process.argv[i]);
}
console.log(acc);
*/

/* Problem 3
var fs = require('fs');
//reads file which will return an object
var buf = fs.readFileSync(process.argv[2]);
//convert to object to string
var str = buf.toString();
//converts string to array at /n
var x = str.split("\n");
//prints index index position
console.log(x.length-1);
*/

/* Problem 4
var fs = require('fs');

fs.readFile(process.argv[2],function(err,data){
    if(err){
        console.log('error');
    }
    var lines=data.toString().split('\n');
    console.log(lines.length-1);
});
*/

/*//Filter Problem 5
var fs = require('fs');
var path = require('path');
const ext = '.' + process.argv[3];
//list is an array of file string names
fs.readdir(process.argv[2],(err, list) => {
    if(err){
      throw err;
        console.log('error');
  }
let matchFile = (file) => {
  //returns true or false value
  return path.extname(file) === ext;
}

list.filter(matchFile).forEach( (element) => {
//for each returns value at index i
  console.log(element);
});
});

MAKE IT MODULAR
//program.js
var mymodule = require('./mymodule.js');
mymodule(process.argv[2],process.argv[3], (err,data) => {
  if(err){
    throw err;
    console.log("error");
  }
  //behind curtain magic
  data.forEach( (element) => {
    console.log(element);
  });
});
//module.js
var fs = require('fs');
var path = require('path');


module.exports = (dirName, fileExt, callback) => {

  const ext = '.' + fileExt;


  fs.readdir (dirName, (err,list) => {
    if(err){
        return callback(err);
        console.log("error");
    }
    var matchFile = (file) => {
      return path.extname(file) == ext;
    }

    callback(null,list.filter(matchFile));
  });
};

//////////////////////
HTTP CLIENT
var http = require('http');
var url = process.argv[2];

http.get(url, (response) => {
    response.setEncoding("utf8");
    response.on("data", (data) => {
        console.log(data);
    });
    response.on("error", (err) => {
        console.log("error");
    });
});


//////////////////////
HTTP COLLECT
var http = require('http');
var url = process.argv[2];

http.get(url, (response) => {
    response.setEncoding("utf8");
    var stream = "";
    response.on("data", (data) => {
        stream += data;
    });
    response.on("error", (err) => {
        //console.log("error");
    });
    response.on("end", () => {
        console.log(stream.length);
        console.log(stream);
    });
});

//////////////////
JUGGLING ASYNC

var http = require('http');
var urls = [process.argv[2],process.argv[3],process.argv[4]];

var textStream = [];

var loadText = function () {
  var url = urls.shift();
  if(!url){
    textStream.forEach((element) => console.log(element));
    return;
  }
  var text = "";
  http.get(url, (response) => {
      response.setEncoding("utf8");
      response.on("data", (data) => {
          text += data;
          //console.log(text);
      });
      response.on("error", (err) => {
          //console.log("error");
      });
      response.on("end", () => {
        textStream.push(text);
        loadText();
      });

  });

};

loadText();

////////////////
TIME SERVER

var net = require('net');
var port = process.argv[2];

var server = net.createServer( (socket) => {
  var date = new Date();
  socket.write(date.getFullYear() + "-" +
              ("0"+(date.getMonth()+1)).slice(-2) + "-" +
              ("0"+date.getDate()).slice(-2) + " " +
              date.getHours() + ":" +
              date.getMinutes()+ "\n");
  socket.end();
});
server.listen(port);

/////////////////
HTTP SERVERS

var http = require('http');
var fs = require('fs');
var port = process.argv[2];
var file = process.argv[3];
var fileStream = fs.createReadStream(file);
var server = http.createServer( (req, res) => {
  if(req) fileStream.pipe(res)
});

server.listen(port);
